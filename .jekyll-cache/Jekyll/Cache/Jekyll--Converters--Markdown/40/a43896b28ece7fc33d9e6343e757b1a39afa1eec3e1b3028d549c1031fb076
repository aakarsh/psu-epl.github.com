I"ƒ@<h2 class="no_toc nonumber" id="table-of-contents">Table of Contents</h2>

<ol class="toc" id="markdown-toc">
  <li><a href="#about-this-site" id="markdown-toc-about-this-site">About this Site</a>    <ol>
      <li><a href="#useful-links" id="markdown-toc-useful-links">Useful Links</a></li>
    </ol>
  </li>
  <li><a href="#content-changes" id="markdown-toc-content-changes">Content Changes</a>    <ol>
      <li><a href="#marking-machines-as-working-or-broken" id="markdown-toc-marking-machines-as-working-or-broken">Marking Machines as Working or Broken</a></li>
      <li><a href="#style" id="markdown-toc-style">Style</a>        <ol>
          <li><a href="#sops" id="markdown-toc-sops">SOPs</a></li>
        </ol>
      </li>
      <li><a href="#organization" id="markdown-toc-organization">Organization</a></li>
    </ol>
  </li>
  <li><a href="#structural-changes" id="markdown-toc-structural-changes">Structural Changes</a>    <ol>
      <li><a href="#previewing-your-changes-locally" id="markdown-toc-previewing-your-changes-locally">Previewing your Changes Locally</a>        <ol>
          <li><a href="#installing-jekyll" id="markdown-toc-installing-jekyll">Installing Jekyll</a>            <ol>
              <li><a href="#jekyll-plugins" id="markdown-toc-jekyll-plugins">Jekyll Plugins</a></li>
            </ol>
          </li>
          <li><a href="#running-jekyll" id="markdown-toc-running-jekyll">Running Jekyll</a></li>
        </ol>
      </li>
      <li><a href="#styling" id="markdown-toc-styling">Styling</a></li>
    </ol>
  </li>
</ol>

<h1 id="about-this-site">About this Site</h1>
<p>This site is hosted through <a href="https://pages.github.com/">GitHub Pages</a> using <a href="https://jekyllrb.com/">Jekyll</a>, 
to make things easier for managers to edit than HTML and cleaner than a GitHub wiki.
All of the actual content is in <a href="https://daringfireball.net/projects/markdown/syntax">Markdown</a> files (<code class="highlighter-rouge">.md</code> or sometimes <code class="highlighter-rouge">.markdown</code>) on the site‚Äôs GitHub <a href="https://github.com/psu-epl/psu-epl.github.com/">repo</a>.</p>

<h2 id="useful-links">Useful Links</h2>
<ul>
  <li><a href="https://github.com/psu-epl/psu-epl.github.com/">repo</a></li>
  <li><a href="https://jekyllrb.com/">Jekyll</a> website</li>
  <li><a href="https://www.ruby-lang.org/en/">Ruby</a> website</li>
  <li><a href="https://daringfireball.net/projects/markdown/syntax">Markdown</a> syntax</li>
  <li><a href="http://yaml.org/">YAML</a> website</li>
  <li><a href="https://github.com/psu-epl/psu-epl.github.com/blob/master/_data/machines.yml">machine status</a> file</li>
  <li><a href="https://pages.github.com/">GH Pages</a> website</li>
  <li><a href="http://lesscss.org/">LESS</a> website</li>
  <li><a href="https://shopify.github.io/liquid/">Liquid</a> website</li>
  <li><a href="https://pages.github.com/versions/">supported plugins</a> on GH Pages</li>
</ul>

<h1 id="content-changes">Content Changes</h1>
<p>Managers are able to make changes to this site <a href="https://github.com/psu-epl/psu-epl.github.com/">through the GitHub repo.</a>
You can edit these relatively easily through a browser by clicking the ‚ÄúEdit this Page‚Äù link <a href="#footer">at the bottom of a page</a>.
However, it‚Äôs preferred that big changes (particularly multi-file changes) be done locally through Git (outside the scope of this guide).
If you‚Äôre making changes locally, <em>please use a <strong>text editor</strong></em> and <em>not</em> a word processor!
Check out the <a href="https://daringfireball.net/projects/markdown/syntax">Markdown</a> syntax, if it‚Äôs not familiar to you.</p>

<p>Non-managers can still contribute through issues and pull requests.</p>

<h2 id="marking-machines-as-working-or-broken">Marking Machines as Working or Broken</h2>
<p>The main page features <a href="http://localhost:4000/#lab-equipment">a list of which machines are currently working</a>,
so users can tell at a glance if they‚Äôll be able to use what they need.
If a machine isn‚Äôt ready to be used by students, it‚Äôs highlighted in red.
To change the status of a machine, go to <a href="https://github.com/psu-epl/psu-epl.github.com/blob/master/_data/machines.yml">_data/machines.yml</a>.
Then, set the <code class="highlighter-rouge">up: </code> field to <code class="highlighter-rouge">true</code> if the machine is working.
I‚Äôm sure you can figure out what to do if it isn‚Äôt working.
Assigning any value other than <code class="highlighter-rouge">true</code> or <code class="highlighter-rouge">false</code> will display that the machine ‚Äúmay have issues‚Äù.</p>

<h2 id="style">Style</h2>
<p>Documents should be structured hierarchically with descriptive headings.
Headings should be done with pound signs, rather than dashes, to avoid ambiguity.
The contents of each heading should fit on a single screen (less than 40 lines), not counting images.</p>

<p>All files must contain a <a href="http://yaml.org/">YAML</a> header, which you should be able to figure out by looking at an existing page..
All YAML headers must contain a title and a layout (if in doubt, use <code class="highlighter-rouge">doc</code>). 
Level 1 headings are not titles.</p>

<p>Media for any documents should go in the <code class="highlighter-rouge">doc/images</code> directory or in an <code class="highlighter-rouge">img</code> directory next to the document.
Supplementary documents, like a manufacturer manual, should go in the same directory as the associated document.</p>

<p>Relative links should be used whenever possible. 
For example, <code class="highlighter-rouge">![](images/kitten.jpg)</code> should be used instead of <code class="highlighter-rouge">http://localhost:4000/images/kitten.jpg</code>.
Absolute links should only be used when linking outside of http://localhost:4000.
For distant relative links, you may find it convenient to take advantage of Jekyll:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{{ site.url }}/some/weird/subdirectories
</code></pre></div></div>

<p>While you <em>can</em> put HTML directly in Markdown files, this is strongly discouraged.
In most cases, HTML is unnecessary and badly hurts readability and maintainability.</p>

<h3 id="sops">SOPs</h3>
<p>Below is a template for how the Markdown of an SOP should look. Pictures and concrete examples are always preferred.</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">title</span><span class="pi">:</span> <span class="s">Coffee Maker</span> <span class="c1"># If this is an SOP, the title should exactly match the name in _data/machines.yml</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">sop</span> <span class="c1"># the type of page ("base", "doc", or "sop"). Most pages are "doc" or "sop".</span>
<span class="na">author</span><span class="pi">:</span> <span class="s">Alice Barnicle, Charles Dunkirk</span> <span class="c1"># the contributors to the page</span>
<span class="na">date</span><span class="pi">:</span> <span class="s">2069-04-20</span> <span class="c1"># the last time this page got a major update</span>
<span class="na">numbersections</span><span class="pi">:</span> <span class="no">true</span> <span class="c1"># controls whether the section headings are numbered</span>
<span class="nn">---</span>

<span class="gu">## Table of Contents</span>
{:.no_toc.nonumber}
<span class="p">
1.</span> ToC
{:toc}
{:.toc}<span class="sb">





</span>A ToC is optional, but preferred for longer documents.
Simply paste the above code into the document.
See this document's source for an explanation.<span class="sb">



</span><span class="gh"># About this Machine</span>
Write a short description of what this machine's good for plus its advantages, disadvantages, and quirks
If it's not automatically linked via the <span class="sb">`sop`</span> layout, you should include a picture of the machine like so:
<span class="p">![</span><span class="nv">picture of the machine</span><span class="p">](</span><span class="sx">images/kitten.jpg</span><span class="p">)</span>

<span class="gu">## Useful Links</span>
<span class="p">-</span> <span class="p">[</span><span class="nv">manufacturer website</span><span class="p">](</span><span class="sx">https://notanactualaddress.foo</span><span class="p">)</span>
<span class="p">-</span> You can find the manual <span class="p">[</span><span class="nv">here</span><span class="p">](</span><span class="sx">manual.pdf</span><span class="p">)</span>.
<span class="p">-</span> more links to manufacturer docs, calculators, outside tutorials, etc.  
It's preferred that critical documents like manuals, TDSs, and MSDSs be kept in the repo when possible/allowed.
Markdown contains a feature to define a bunch of named links at the bottom of your document.
This can make it easier to create your "useful links" list and to refer to them throughout the document.

<span class="gu">## Machine Safety</span>
Include notes about possible hazards and the necessary procedures and equipment to avoid them.
Make it clear that the user is responsible for their own safety 
and that of the people around them while using this tool.

<span class="gu">## How to Get Help</span>
Include a list of which documents, websites, people, or mailing lists should be consulted in case of problems.

<span class="gh"># Using this Machine</span>
These sections describe the standard usage and common pitfalls.

<span class="gu">## Setup</span>
Describe how to check that the machine is okay to use.
Describe make the machine ready to use.

<span class="gu">## Operation</span>
Show how to actually <span class="ge">*do the thing*</span>.

<span class="gu">## Shutdown</span>
Explain how to safely shut down the machine.

<span class="gu">## Cleanup</span>
Explain how to reset the work station for the next user.

<span class="gh"># Tips and Tricks</span>
List some sections describing advaned techniques.

<span class="gu">## How to Make Tea with this Machine</span><span class="sb">



</span></code></pre></div></div>

<h2 id="organization">Organization</h2>
<p>Every directory gets an <code class="highlighter-rouge">index.md</code>. 
It‚Äôs okay if that‚Äôs the only file in that directory, but it must link to all the other files in that directory.
(That includes the subdirectories.)
<code class="highlighter-rouge">index.md</code> is also what other files should generally point to. 
To link from <code class="highlighter-rouge">doc/policies/foo.md</code> to <code class="highlighter-rouge">doc/equip/misc/index.md</code>, you‚Äôd use a link like this:
<code class="highlighter-rouge">[Click here to go to misc.](../equip/misc)</code></p>

<h1 id="structural-changes">Structural Changes</h1>
<p>GitHub Pages automatically builds the Markdown content into HTML pages using <a href="https://jekyllrb.com/">Jekyll</a>, a <a href="https://www.ruby-lang.org/en/">Ruby</a> library.
It‚Äôs possible to make changes to the layout, configuration, and theme files through the GitHub website,
however this is strongly discouraged. 
Instead, you should make and preview changes locally before publishing them to the website. 
This helps us not have a broken website.
Small changes to Markdown files are still okay though.</p>

<h2 id="previewing-your-changes-locally">Previewing your Changes Locally</h2>
<p>It‚Äôs assumed that you already know how to use <code class="highlighter-rouge">git</code> to clone and make changes to the website‚Äôs repo.
For small changes, you can probably get away with not learning much about Jekyll.
For larger changes, you‚Äôll need to find your own help. The <a href="https://jekyllrb.com/">Jekyll</a> website is pretty good for this.
A look at <a href="https://shopify.github.io/liquid/">Liquid</a>, upon which Jekyll is based, may also be very helpful.</p>

<h3 id="installing-jekyll">Installing Jekyll</h3>
<p>You‚Äôll need to install <a href="https://www.ruby-lang.org/en/">Ruby</a> to run Jekyll. 
Within Ruby, you‚Äôll need the <code class="highlighter-rouge">bundler</code> and <code class="highlighter-rouge">ruby-dev</code> libraries before you install <code class="highlighter-rouge">jekyll</code>.
If you‚Äôre using the <code class="highlighter-rouge">apt</code> package manager, this can be done very easily by running these commands:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt install ruby
sudo gem install bundler ruby-dev jekyll
</code></pre></div></div>

<p><code class="highlighter-rouge">gem</code> is the package manager for Ruby libraries.</p>

<h4 id="jekyll-plugins">Jekyll Plugins</h4>
<p>If there are any plugins in use, you‚Äôll need to install those too. 
You can check the <code class="highlighter-rouge">_config.yml</code> file for a list of enabled plugins.
Note that if you‚Äôre wanting to enable more plugins, 
<a href="https://pages.github.com/versions/">only those used by GitHub Pages</a> will work in the published site.</p>

<p>In particular, we currently use the following plugins:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	sudo gem install jekyll-sitemap
	sudo gem install jemoji
	this is an edit!
</code></pre></div></div>

<h3 id="running-jekyll">Running Jekyll</h3>
<p>The necessary commands are already set up in the Makefile, 
so you can simply run <code class="highlighter-rouge">make preview</code> and visit the address it tells you in a browser.
This is usually <code class="highlighter-rouge">localhost:4000</code>. (Literally paste <code class="highlighter-rouge">localhost:4000</code> into your address bar.) 
While this command is running, any file you change will be automatically rebuilt in the site.</p>

<p>It can be very helpful to keep the terminal running this command visible, since it will call out any errors
or instances of files that couldn‚Äôt be found, such as broken image links.
Remember to refresh the page in your browser to see these changes.
If you don‚Äôt have <code class="highlighter-rouge">make</code>, running <code class="highlighter-rouge">jekyll serve --watch</code> is equivalent.</p>

<p>Note that the Markdown, YAML, CSS, et cetera files are the <em>source</em> files for the site. 
Jekyll renders them and puts the results in <code class="highlighter-rouge">_site</code>.
Thus, any changes you make to files in <code class="highlighter-rouge">_site</code> will get wiped out when they‚Äôre rendered again.
You should <strong><em>never</em></strong> commit anything in the <code class="highlighter-rouge">_site</code> directory! 
(It‚Äôs ignored by the <code class="highlighter-rouge">.gitignore</code>, so this should be hard to do by accident anyway.)
GitHub Pages will automatically re-render the site when changes are pushed to the <code class="highlighter-rouge">master</code> branch.</p>

<h2 id="styling">Styling</h2>
<p>The site‚Äôs CSS is built via <a href="http://lesscss.org/">LESS CSS</a> from <code class="highlighter-rouge">assets/less/style.less</code>.
The resulting CSS is already in the repo, so you don‚Äôt need to worry about it unless you‚Äôre changing it.
If you do need to change it, you‚Äôll need the <code class="highlighter-rouge">less</code> gem installed:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	sudo gem install less
</code></pre></div></div>

<p>Alternatively you can install and use lessc through npm which is bundles with nodejs.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	sudo npm install -g less less-plugin-clean-css
</code></pre></div></div>

<p>This should give you access to the <code class="highlighter-rouge">lessc</code> command.</p>

<p>You‚Äôll also need to get the submodule that contains the theme that serves as a basis for the styling:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	git submodule init
	git submodule update
</code></pre></div></div>

<p>This will clone the repo that provides that styling.</p>

<p>Run <code class="highlighter-rouge">make theme</code> or <code class="highlighter-rouge">make themedev</code> to build the CSS.
(<code class="highlighter-rouge">make theme</code> compresses the CSS by removing whitespace. Currently, it tries to use a deprecated option to <code class="highlighter-rouge">lessc</code>. There isn‚Äôt much reason to update it going forward though.)</p>

:ET